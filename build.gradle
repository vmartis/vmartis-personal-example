import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    ext.kotlin_version = '1.4.32'

    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlin_version")
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'com.github.node-gradle.node' version '2.2.4'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.dorongold.task-tree' version '1.5'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.64'
    id 'org.unbroken-dome.xjc' version '2.0.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.plugin.jpa' version "${kotlin_version}"
    id 'org.jetbrains.kotlin.kapt' version "${kotlin_version}"
}

node {
    // Version of node to use.
    version = '12.13.0'

    // Version of npm to use.
    npmVersion = '6.12.0'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")
    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/nmp")
}

//apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'com.github.node-gradle.node'
apply plugin: 'idea'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-kapt'

java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

if (!project.hasProperty("buildNumber")) {
    ext.buildNumber = ""
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'number': project.buildNumber
            ]
        }
    }
}

//Profile specific code
if (project.hasProperty('prod')) {
    jar {
        excludes = ['**/application*.yml', 'db/local-data', 'db/local-schema']
    }
}
if (project.hasProperty('int')) {
    test {
        environment 'SPRING_PROFILES_ACTIVE', 'int'
        System.setProperty('test.integration.enabled', 'true')
    }
}

jar {
    enabled = false
}

configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}


// pass system properties into test env
tasks.withType(Test) {
    systemProperties System.properties
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.security.oauth:spring-security-oauth2:2.5.0.RELEASE')
    compile('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.3.4.RELEASE')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4')
    compile('com.google.guava:guava:30.1-jre')
    compile('org.apache.commons:commons-lang3:3.12.0')
    compile('org.iban4j:iban4j:3.2.1')
    compileOnly('org.projectlombok:lombok:1.18.20')
    implementation('org.flywaydb:flyway-core')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.mapstruct:mapstruct:1.4.2.Final')
    implementation('javax.xml.bind:jaxb-api:2.3.1')
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    runtimeOnly('org.postgresql:postgresql')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testImplementation('io.mockk:mockk:1.12.0')
    testImplementation('org.mockito.kotlin:mockito-kotlin:3.2.0')

    annotationProcessor ('org.projectlombok:lombok:1.18.20')

    kapt('org.hibernate:hibernate-jpamodelgen:5.4.31.Final')
    kapt('org.mapstruct:mapstruct-processor:1.4.2.Final')
}

sourceSets {
    xjcGenerated {
        java {
            srcDir '/build/generated/sources/xjc/java'
        }
    }
}

xjc {
    extension = true
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

npm_install {
    description = "Installs dependencies from package.json"
    workingDir = file("${project.projectDir}/src/main/client")
}

task npm_run_build(type: NpmTask) {
    description = "Build production web application build"
    workingDir = file("${project.projectDir}/src/main/client")
    doFirst {
        args = ['run', 'build', '--debug']
    }
    if (project.hasProperty('skipTests')) {
        dependsOn 'npm_install'
    } else {
        dependsOn 'npm_run_test'
    }
}

task npm_run_test(type: NpmTask) {
    description = "Run frontend unit tests"
    workingDir = file("${project.projectDir}/src/main/client")
    args = ['run', 'test:unit', '--debug']
}

task npm_run_dev(type: NpmTask) {
    description = "Run development of web application"
    workingDir = file("${project.projectDir}/src/main/client")
    args = ['run', 'serve', '--debug']
}

task writeBuildNumber {
    doLast {
        def propertyFile = file('gradle.properties')
        def props = new Properties()
        propertyFile.withReader { props.load(it) }
        props.setProperty('buildNumber', project.buildNumber)
        propertyFile.withWriter { props.store(it, null) }
    }
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}-${archiveVersion.get()}"
    if (project.buildNumber?.trim()) {
        archiveFileName = "${archiveFileName.get()}-${project.buildNumber}"
    }
    archiveFileName = "${archiveFileName.get()}.${archiveExtension.get()}"
}

task replacePlaceholders {
    description = "Replace placeholders in specified files."
    doLast {
        ant.replace(file: "${project.buildDir}/resources/main/static/index.html", token: "@version@", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/resources/main/static/index.html", token: "@build.time@", value: ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME))
        ant.replace(file: "${project.buildDir}/resources/main/static/index.html", token: "@build.number@", value: "${project.buildNumber}")
    }
}

task changelogCreate(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    dependsOn 'release'

    file = new File("CHANGELOG.md")
    templateContent = file('changelog.mustache').getText('UTF-8')
    fromRepo = file(".")
}

task changelogCommit {
    dependsOn 'changelogCreate'
    doLast {
        exec {
            commandLine "git", "add", "CHANGELOG.md"
        }
        exec {
            commandLine "git", "commit", "-m", "\"Update CHANGELOG.md\"", "CHANGELOG.md"
        }
        exec {
            commandLine "git", "push"
        }
    }
}

task releaseWithChangelog() {
    dependsOn 'changelogCommit'
}

compileKotlin {
    dependsOn xjcGenerate
}

npm_run_test.dependsOn(npm_install)
writeBuildNumber.dependsOn(npm_run_build)
replacePlaceholders.dependsOn(writeBuildNumber)
bootJar.dependsOn(replacePlaceholders)
